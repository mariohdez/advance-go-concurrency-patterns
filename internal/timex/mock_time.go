// Code generated by MockGen. DO NOT EDIT.
// Source: time.go
//
// Generated by this command:
//
//	mockgen -package=timex -source=time.go -destination=mock_time.go
//

// Package timex is a generated GoMock package.
package timex

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockTicker is a mock of Ticker interface.
type MockTicker struct {
	ctrl     *gomock.Controller
	recorder *MockTickerMockRecorder
	isgomock struct{}
}

// MockTickerMockRecorder is the mock recorder for MockTicker.
type MockTickerMockRecorder struct {
	mock *MockTicker
}

// NewMockTicker creates a new mock instance.
func NewMockTicker(ctrl *gomock.Controller) *MockTicker {
	mock := &MockTicker{ctrl: ctrl}
	mock.recorder = &MockTickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicker) EXPECT() *MockTickerMockRecorder {
	return m.recorder
}

// C mocks base method.
func (m *MockTicker) C() <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "C")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// C indicates an expected call of C.
func (mr *MockTickerMockRecorder) C() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*MockTicker)(nil).C))
}

// Stop mocks base method.
func (m *MockTicker) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTickerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTicker)(nil).Stop))
}

// MockTickerBuilder is a mock of TickerBuilder interface.
type MockTickerBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockTickerBuilderMockRecorder
	isgomock struct{}
}

// MockTickerBuilderMockRecorder is the mock recorder for MockTickerBuilder.
type MockTickerBuilderMockRecorder struct {
	mock *MockTickerBuilder
}

// NewMockTickerBuilder creates a new mock instance.
func NewMockTickerBuilder(ctrl *gomock.Controller) *MockTickerBuilder {
	mock := &MockTickerBuilder{ctrl: ctrl}
	mock.recorder = &MockTickerBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTickerBuilder) EXPECT() *MockTickerBuilderMockRecorder {
	return m.recorder
}

// NewTicker mocks base method.
func (m *MockTickerBuilder) NewTicker(d time.Duration) Ticker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTicker", d)
	ret0, _ := ret[0].(Ticker)
	return ret0
}

// NewTicker indicates an expected call of NewTicker.
func (mr *MockTickerBuilderMockRecorder) NewTicker(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTicker", reflect.TypeOf((*MockTickerBuilder)(nil).NewTicker), d)
}
